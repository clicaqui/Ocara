#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Copyright (C) 2008 Wilson Pinto Júnior <wilson@openlanhouse.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#Classes que representam cada tabela (entende-se como objeto).

class Machine(object):
    __name__ = "Machine"
    
    #Método que "representa" o objeto, por exemplo ao usar o comando
    # "print objeto".
    def __repr__(self):
        return ("<Machine(name=%s hash_id=%s)>" % \
                        (self.name, self.hash_id))

class MachineCategory(object):
    __name__ = "MachineCategory"
    
    #Método que "representa" o objeto, por exemplo ao usar o comando
    # "print objeto".
    def __repr__(self):
        return ("<CategoryMachine(%s)>" % self.name)

class Heritage(object):
    __name__ = "Heritage"
    
    #Método que "representa" o objeto, por exemplo ao usar o comando
    # "print objeto".
    def __repr__(self):
        return ("<Patrimonio(name=%s number_ben=%s)>" % \
                        (self.name, self.number_ben))

class UserCategory(object):
    __name__ = "UserCategory"
    
    #Método que "representa" o objeto, por exemplo ao usar o comando
    # "print objeto".
    def __repr__(self):
        return ("<UserMachine(%s)>" % self.name)

class CashFlowItem(object):
    __name__ = "CashFlowItem"
    
    #Método que "representa" o objeto, por exemplo ao usar o comando
    # "print objeto".
    def __repr__(self):
        return "<CashFlowItem(%0.2f)>" % self.value

class OpenDebtMachineItem(object):
    __name__ = "OpenDebtMachineItem"
    
    #Método que "representa" o objeto, por exemplo ao usar o comando
    # "print objeto".
    def __repr__(self):
        return "<OpenDebtMachineItem(%0.2f)>" % self.value

class OpenDebtOtherItem(object):
    __name__ = "OpenDebtOtherItem"
    
    #Método que "representa" o objeto, por exemplo ao usar o comando
    # "print objeto".
    def __repr__(self):
        return "<OpenDebtOtherItem(%0.2f)>" % self.value

class HistoryItem(object):
    __name__ = "HistoryItem"

class User(object):
    __name__ = "User"
    
    (nick, full_name, email, responsible, birth,
     phone, notes, last_login,
     last_machine, reg_date, password) = (None,) * 11
    
    active = True
    credit = 0
    login_count = 0

    def __init__(self, nick, full_name, password, *args, **kwargs):
        self.nick, self.full_name = nick, full_name
        self.password = password
    
    def __repr__(self):
        return "<User(%s, %s)>" % (self.nick, self.full_name)

class Version(object):
    __name__ = "Version"
    
    name, value = None, None
    
    def __init__(self, name, value, codigo_aps, codigo_onid):
        self.name = name
        self.value = value
        self.codigo_aps = codigo_aps
        self.codigo_onid = codigo_onid
    
    def __repr__(self):
        return "<Version(%s, %s)" % (self.name, self.value)


class AlienationMachine(object):
    __name__ = "AlienationMachine"
    
    def __repr__(self):
        return ("<Alienation(usuario=%s maquina=%s motivo=%s)>" % \
                        (self.user_alienation, self.id_machine, self.id_reason))
    

class TypeDeficiency(object):
    __name__ = "TypeDeficiency"
    
    def __repr__(self):
        return ("<TypeDeficiency(description=%s)>" % \
                        (self.description))

class Etnia(object):
    __name__ = "Etnia"
    
    def __repr__(self):
        return ("<Etnia(description=%s)>" % \
                        (self.description))

class MaritalStatus(object):
    __name__ = "MaritalStatus"
    
    def __repr__(self):
        return ("<MaritalStatus(description=%s)>" % \
                        (self.description))

class Pais(object):
    __name__ = "Pais"
    
    def __repr__(self):
        return ("<Pais(description=%s)>" % \
                        (self.description))


class State(object):
    __name__ = "State"
    
    def __repr__(self):
        return ("<State(description=%s)>" % \
                        (self.description))

class City(object):
    __name__ = "City"
    
    def __repr__(self):
        return ("<City(description=%s)>" % \
                        (self.name))

class Schooling(object):
    __name__ = "Schooling"
    
    def __repr__(self):
        return ("<Schooling(description=%s)>" % \
                        (self.description))

class Occupation(object):
    __name__ = "Occupation"
    
    def __repr__(self):
        return ("<Occupation(description=%s)>" % \
                        (self.description))


class SituationOccupation(object):
    __name__ = "SituationOccupation"
    
    def __repr__(self):
        return ("<SituationOccupation(description=%s)>" % \
                        (self.description))


class RendaFamiliar(object):
    __name__ = "RendaFamiliar"
    
    def __repr__(self):
        return ("<RendaFamiliar(description=%s)>" % \
                        (self.description))

class RegistroGeral(object):
    __name__ = "RegistroGeral"
    
    def __repr__(self):
        return ("<RegistroGeral(estado_expedicao=%s)>" % \
                        (self.estado_expedicao))

class Address(object):
    __name__ = "Address"
    
    def __repr__(self):
        return ("<Address(city=%s)>" % \
                        (self.id))


class CertidaoNascimento(object):
    __name__ = "CertidaoNascimento"
    
    def __repr__(self):
        return ("<CertidaoNascimento(cidade=%s)>" % \
                        (self.cidade))

class ReasonAlienation(object):
    __name__ = "ReasonAlienation"
    
    def __repr__(self):
        return ("<ReasonAlienation(description=%s)>" % \
                        (self.description))    
    
class ScheduleOfBorrow(object):
    __name__ = "ScheduleOfBorrow"
    
    def __repr__(self):
        return ("<ScheduleOfBorrow(usuario=%s maquina=%s data_volta=%s)>" % \
                        (self.id_user, self.id_machine, self.return_date))
                        
class ReserveOfBorrow(object):
    __name__ = "ReserveOfBorrow"
    
    def __repr__(self):
        return ("<ReserveOfBorrow(usuario=%s maquina=%s reservado=%s)>" % \
                        (self.id_user, self.id_machine, self.is_reserve))                        
    
class DescriptionOpenDebtsOther(object):
    __name__ = "DescriptionOpenDebtsOther"
    
    def __repr__(self):
        return ("<DescriptionOpenDebtsOther(description=%s)>" % \
                        (self.description)) 
    
class Telecentro(object):
    __name_ = "Telecentro" 
    
    def __repr__(self):
        return ("<Telecentro(nome=%s email=%s responsavel=%s)>" % \
                        (self.name, self.e_mail, self.first_responsible))
    
class Block(object):
    __name__ = "Block"
    
    def __repr__(self):
        return ("<Block(descricao=%s data_bloqueio=%s)>" % \
                        (self.long_description, self.date_block))
    
class BlockBorrow(object):
    __name__ = "BlockBorrow"
    
    def __repr__(self):
        return ("<BlockBorrow(descricao=%s data_bloqueio=%s)>" % \
                        (self.long_description, self.date_block))
    
class DescriptionBlock(object):     
    __name__ = "DescriptionBorrow"
    
class DescriptionBlockBorrow(object):
    __name__ = "DescriptionBlockBorrow"
    
class Cash(object):
    __name__ = "Cash"
    
    def __repr__(self):
        return ("<Cash(usuario=%s total=%s)>" % \
                        (self.user_id, self.balance))  
    
