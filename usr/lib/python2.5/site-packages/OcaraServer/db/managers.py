#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Copyright (C) 2008 Wilson Pinto Junior <wilson@openlanhouse.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from OcaraServer.db.models import Machine, User, CashFlowItem, HistoryItem, MachineCategory, AlienationMachine
from OcaraServer.db.models import OpenDebtMachineItem, OpenDebtOtherItem, Version, UserCategory, DescriptionOpenDebtsOther
from OcaraServer.db.models import Block, BlockBorrow, DescriptionBlock, DescriptionBlockBorrow, Heritage, Telecentro
from OcaraServer.db.models import ReasonAlienation, ScheduleOfBorrow, ReserveOfBorrow, City
from OcaraServer.db.models import TypeDeficiency, Schooling, SituationOccupation, Occupation, RendaFamiliar, RegistroGeral
from OcaraServer.db.models import CertidaoNascimento, Pais, State, MaritalStatus, Etnia, Address, Perfil, Perfil_User
from OcaraServer.db.models import Action, ActionCategory, PerfilAction
from OcaraServer.db.basemanager import BaseManager, BaseFlow

from datetime import date

from sqlalchemy import Table, Column, Boolean, Integer, String, Text
from sqlalchemy import Date, DateTime, Float, ForeignKey
from sqlalchemy.sql.expression import asc, desc, between
from sqlalchemy.orm import mapper, relation
from sqlalchemy.sql import select, and_, or_, delete, update, func, exists, text

#Classe responsavel por Gerenciar(consultas em geral) a tabela Version.
class VersionManager(BaseManager):
    __table_name__ = "versions"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Version)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('name', String(25), nullable=False, unique=True),
                      Column('value', String(40), nullable=False),
                      Column('codigo_aps', String(40), nullable=False),
                      Column('codigo_onid', String(40), nullable=False)
                      )

        #cria um mapeamento entre a tabela versions e a classe Version.
        self.mapper = mapper(Version, self.table)

#Classe responsavel por Gerenciar(consultas em geral) a tabela TipoDeficiencia.
class TypeDeficiencyManager(BaseManager):
    __table_name__ = "type_deficiency"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, TypeDeficiency)

        typeDeficiency = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(100))
                      )

        #cria um mapeamento entre a tabela type_deficiency e a classe TypeDeficiency.
        self.mapper = mapper(TypeDeficiency, typeDeficiency)


#Classe responsavel por Gerenciar(consultas em geral) a tabela Schooling.
class SchoolingManager(BaseManager):
    __table_name__ = "schooling"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Schooling)

        schooling = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(100))
                      )

        #cria um mapeamento entre a tabela type_deficiency e a classe TypeDeficiency.
        self.mapper = mapper(Schooling, schooling)

#Classe responsavel por Gerenciar(consultas em geral) a tabela SituationOccupation.
class SituationOccupationManager(BaseManager):
    __table_name__ = "situation_occupation"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, SituationOccupation)

        situationOccupation = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(100))
                      )

        #cria um mapeamento entre a tabela situation_occupation e a classe SituationOccupation.
        self.mapper = mapper(SituationOccupation, situationOccupation)


#Classe responsavel por Gerenciar(consultas em geral) a tabela Occupation.
class OccupationManager(BaseManager):
    __table_name__ = "occupation"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Occupation)

        occupation = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(50))
                      )

        #cria um mapeamento entre a tabela situation_occupation e a classe SituationOccupation.
        self.mapper = mapper(Occupation, occupation,
                             #properties={'situation_occupation':relation(SituationOccupation)},
			     allow_column_override=True)


#Classe responsavel por Gerenciar(consultas em geral) a tabela RendaFamiliar.
class RendaFamiliarManager(BaseManager):
    __table_name__ = "renda_familiar"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, RendaFamiliar)

        rendaFamiliar = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(100))
                      )

        #cria um mapeamento entre a tabela situation_occupation e a classe SituationOccupation.
        self.mapper = mapper(RendaFamiliar, rendaFamiliar)

#Classe responsavel por Gerenciar(consultas em geral) a tabela RendaFamiliar.
class EtniaManager(BaseManager):
    __table_name__ = "etnia"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Etnia)

        etnia = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(100))
                      )

        #cria um mapeamento entre a tabela situation_occupation e a classe SituationOccupation.
        self.mapper = mapper(Etnia, etnia)

#Classe responsavel por Gerenciar(consultas em geral) a tabela RendaFamiliar.
class MaritalStatusManager(BaseManager):
    __table_name__ = "marital_status"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, MaritalStatus)

        maritalStatus = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(100))
                      )

        #cria um mapeamento entre a tabela situation_occupation e a classe SituationOccupation.
        self.mapper = mapper(MaritalStatus, maritalStatus)


#Classe responsavel por Gerenciar(consultas em geral) a tabela Pais.
class PaisManager(BaseManager):
    __table_name__ = "pais"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Pais)

        pais = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(100))
                      )

        self.mapper = mapper(Pais, pais)


#Classe responsavel por Gerenciar(consultas em geral) a tabela State.
class StateManager(BaseManager):
    __table_name__ = "state"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, State)

        state = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('name', String(100)),
		      Column('sigla', String(100))
                      )

        self.mapper = mapper(State, state)



#Classe responsavel por Gerenciar(consultas em geral) a tabela State.
class CityManager(BaseManager):
    __table_name__ = "city"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, City)

        city = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('id_state', Integer), #ForeignKey('state.id'))
		      Column('name', String(50)),
		      Column('codigo_ibge', String(50))
                      )

        self.mapper = mapper(City, city)

    def get_lista_cidades(self, id_state):
        s = select([City.id, City.name],
                    City.id_state==id_state)

        return self.db_session.session.execute(s).fetchall()


#Classe responsavel por Gerenciar(consultas em geral) a tabela RegistroGeral.
class RegistroGeralManager(BaseManager):
    __table_name__ = "registro_geral"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, RegistroGeral)

        registroGeral = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('numero_ident', String(10)),
                      Column('orgao_expeditor', String(10)),
                      Column('state', Integer),#ForeignKey('state.id'))
                      Column('date_expedicao', String(10)),
		      Column('user', Integer) #ForeignKey('user.id'))
                      )

        #cria um mapeamento entre a tabela situation_occupation e a classe SituationOccupation.
        self.mapper = mapper(RegistroGeral, registroGeral)


#Classe responsavel por Gerenciar(consultas em geral) a tabela CertidaoNascimento.
class CertidaoNascimentoManager(BaseManager):
    __table_name__ = "certidao_nascimento"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, CertidaoNascimento)

        certidaoNascimento = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('registro', Integer, primary_key=True),
                      Column('estado', String(10)),
                      Column('cidade', String(10)),
                      Column('cartorio', String(255)),
                      Column('livro', String(20)),
                      Column('folha', String(100)),
		      Column('user', Integer) #ForeignKey('user.id'))
                      )

        #cria um mapeamento entre a tabela situation_occupation e a classe SituationOccupation.
        self.mapper = mapper(CertidaoNascimento, certidaoNascimento)


#Classe responsavel por Gerenciar(consultas em geral) a tabela MachineCategory.
class MachineCategoryManager(BaseManager):
    __table_name__ = "machine_category"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, MachineCategory)

        self.table = Table(self.__table_name__,
                          self.db_session.metadata,
                          Column('id', Integer, primary_key=True),
                          Column('name', String(25), nullable=False, unique=True),
                          Column('custom_logo', Boolean, default=False),
                          Column('custom_background', Boolean, default=False),
                          Column('logo_path', String(100), nullable=True),
                          Column('background_path', String(100), nullable=True),
                          Column('custom_price_hour', Boolean, default=False),
                          Column('price_hour', Float, default=0),
                          Column('cam_be_borrowed', Boolean)
                          )

        self.mapper = mapper(MachineCategory, self.table)

    def get_category(self, id_category):
        s = select([MachineCategory.background_path, MachineCategory.logo_path, MachineCategory.custom_logo, MachineCategory.custom_background],
                    MachineCategory.id==id_category)

        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out

    def get_price_by_machine_id(self, machine_id):
        s = select([MachineCategory.price_hour], and_(Machine.c.id == machine_id, Machine.c.category_id == MachineCategory.c.id))
        out = self.db_session.session.execute(s).fetchone()
        if out:
            out = out[0]
        return out


#Classe responsavel por Gerenciar(consultas em geral) a tabela UserCategory.
class UserCategoryManager(BaseManager):
    __table_name__ = "user_category"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, UserCategory)

        self.table = Table(self.__table_name__,
                          self.db_session.metadata,
                          Column('id', Integer, primary_key=True),
                          Column('name', String(25), nullable=False, unique=True),
                          Column('allow_login', Boolean, default=True),
                          Column('custom_price_hour', Boolean, default=False),
                          Column('price_hour', Float, default=0),
                          Column('time_limit_machine', DateTime, default=0)
                          )

        self.mapper = mapper(UserCategory, self.table)

#Classe responsavel por Gerenciar(consultas em geral) a tabela AlienationMachine.
class AlienationMachineManager(BaseManager):
    __table_name__ = "alienat_machine"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, AlienationMachine)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('user_alienation', Integer),
                      Column('id_reason', Integer),
                      Column('date_alienation', DateTime),
                      Column('date_unalienation', DateTime),
                      Column('comment', Text, nullable=True),
                      Column('user_unalienation', Integer, nullable=True),
		      Column('heritage_id', Integer),
		      Column('machine_id', Integer)
                      )

        self.mapper = mapper(AlienationMachine, self.table)

    def get_machines_alienation(self, date_alienation):
        s = select([AlienationMachine.id], AlienationMachine.date_alienation==date_alienation)
        return self.db_session.session.execute(s).fetchall()

    def get_id(self, date_alienation):
         s = select([AlienationMachine.id],
                   AlienationMachine.date_alienation==date_alienation)

         out = self.db_session.session.execute(s).fetchone()

         if out:
             out = out[0]

         return out


#Classe responsavel por Gerenciar(consultas em geral) a tabela ReasonAlienation.
class ReasonAlienationManager(BaseManager):
    __table_name__ = "reason_alienation"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, ReasonAlienation)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', Text)
                      )


        self.mapper = mapper(ReasonAlienation, self.table)

    def get_description(self, id_description):
         s = select([ReasonAlienation.description],
                   ReasonAlienation.id==id_description)

         out = self.db_session.session.execute(s).fetchone()

         if out:
             out = out[0]

         return out


#Classe responsavel por Gerenciar(consultas em geral) a tabela ScheduleOfBorrow.
class ScheduleOfBorrowManager(BaseManager):
    __table_name__ = "schedule_of_borrow"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, ScheduleOfBorrow)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('id_user', Integer),
                      Column('responsible_user', String(255)),
                      Column('borrowed_date', DateTime),
                      Column('return_date', DateTime),
                      Column('comment', Text),
                      Column('heritage_id', Integer)
                      )

        self.mapper = mapper(ScheduleOfBorrow, self.table)

    def get_by_period_and_heritage_id(self, heritage_id, from_date, to_date):
        s = select([ScheduleOfBorrow.borrowed_date, User.full_name, ScheduleOfBorrow.return_date], and_(ScheduleOfBorrow.c.heritage_id == heritage_id, ScheduleOfBorrow.c.id_user == User.c.id, ScheduleOfBorrow.c.borrowed_date.between(from_date, to_date) ) )
        return self.db_session.session.execute(s).fetchall()


    #consultar emprestimos por responsavel. Traz os emprestimos realizados pelo responsavel
    def get_user_id_responsible(self, id_user):
        s = select([ScheduleOfBorrow.id, ScheduleOfBorrow.id_user,
                    ScheduleOfBorrow.return_date],
                    ScheduleOfBorrow.responsible_user==id_user)
        return self.db_session.session.execute(s).fetchall()

    #consultar os emprestimos pela data de devolucao.
    def get_return_date(self, return_date):
        s = select([ScheduleOfBorrow.id, ScheduleOfBorrow.id_user,
                    ScheduleOfBorrow.return_date],
                    ScheduleOfBorrow.return_date==return_date)
        return self.db_session.session.execute(s).fetchall()

    #consultar por usuario logado. Traz o que esta emprestado para o usuario.
    # parte cliente
    def get_user_id(self, id_user):
        s = select([ScheduleOfBorrow.id, ScheduleOfBorrow.id_user,
                    ScheduleOfBorrow.return_date], ScheduleOfBorrow.id_user==id_user)

        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out


 #Classe responsavel por Gerenciar(consultas em geral) a tabela ScheduleOfBorrow.
class ReserveOfBorrowManager(BaseManager):
    __table_name__ = "reserve_of_borrow"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, ReserveOfBorrow)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('id_user', Integer), #ForeignKey('user.id')),
                      Column('id_heritage', Integer), #ForeignKey('heritage.id')),
                      Column('id_machines', Integer), #ForeignKey('machine.id')),
                      Column('responsible_user', Integer),
                      Column('reserve_date', DateTime),
                      Column('reserve_date_fim', DateTime),
                      Column('comment', Text)
                      )

        self.mapper = mapper(ReserveOfBorrow, self.table)#,
                             #properties={'user':relation(User),
                              #           'heritage':relation(Heritage),
                               #          'machine':relation(Machine)})

    #consultar emprestimos por responsavel. Traz os emprestimos realizados pelo responsavel
    def get_user_id_responsible(self, id_user):
        s = select([ReserveOfBorrow.id, ReserveOfBorrow.id_user,
                    ReserveOfBorrow.reserve_date],
                    ReserveOfBorrow.responsible_user==id_user)
	order_by = [asc(ReserveOfBorrow.reserve_date)]

        return self.db_session.session.execute(s).fetchall()

    def delete_by_id(self, id):
        s = delete(self.table, ReserveOfBorrow.id==id)
        self.db_session.session.execute(s)
        self.commit()
        self.emit("delete", id)

    #consultar por usuario logado. Traz o que esta emprestado para o usuario.
    # parte cliente
    def get_list_user_id(self, id_user):
        s = select([ReserveOfBorrow.id, ReserveOfBorrow.id_user,
                    ReserveOfBorrow.reserve_date], ReserveOfBorrow.id_user==id_user)

        return self.db_session.session.execute(s).fetchall()

    def get_user_id(self, id_user, heritage_id):
        s = select([ReserveOfBorrow.id, ReserveOfBorrow.id_user,
                    ReserveOfBorrow.reserve_date],
                    and_(ReserveOfBorrow.id_user==id_user,
                         ReserveOfBorrow.id_heritage==heritage_id))

	order_by = [desc(ReserveOfBorrow.id)]

        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out

        return out

    def get_next_user(self, heritage_id):
        s = select([ReserveOfBorrow.id, ReserveOfBorrow.id_user,
                    ReserveOfBorrow.reserve_date],
                    and_(ReserveOfBorrow.id_heritage==heritage_id))

	order_by = [asc(ReserveOfBorrow.id)]

        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out

        return out



    def get_reserve_id(self, heritage_id):
        s = select([ReserveOfBorrow.id, ReserveOfBorrow.id_user,
                    ReserveOfBorrow.reserve_date], ReserveOfBorrow.id_heritage==heritage_id)

        return self.db_session.session.execute(s).fetchall()


#Classe responsavel por Gerenciar(consultas em geral) a tabela DescriptionOpenDebtsOther.
class DescriptionOpenDebtsOtherManager(BaseManager):
    __table_name__ = "description_opendebts_other"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, DescriptionOpenDebtsOther)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', Text, nullable=True),
                      Column('quantity', Integer, nullable=True)
                      )

        self.mapper = mapper(DescriptionOpenDebtsOther, self.table)

#Classe responsavel por Gerenciar(consultas em geral) a tabela Telecentro.
class TelecentroManager(BaseManager):
    __table_name__ = "telecentro"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Telecentro)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('first_responsible', String(40), nullable=True),
                      Column('secund_responsible', String(40), nullable=True),
                      Column('name', String(255), nullable=True),
                      Column('fone_number_comer', String(10), nullable=True),
                      Column('fone_number_cel', String(10), nullable=True),
                      Column('fone_number_fax', String(10), nullable=True),
                      Column('fone_number_respon1', String(10), nullable=True),
                      Column('fone_number_respon2', String(10), nullable=True),
                      Column('cnpj', String(20), nullable=True),
                      Column('address', Text, nullable=True),
                      Column('cep', String(20), nullable=True),
                      Column('city', String(40), nullable=True),
                      Column('uf', String(5), nullable=True)
                      )

        self.mapper = mapper(Telecentro, self.table)

    def get_telecentro(self):
         s = select([Telecentro])

         out = self.db_session.session.execute(s).fetchone()

         return out



#Classe responsavel por Gerenciar(consultas em geral) a tabela DescriptionBlock.
class DescriptionBlockManager(BaseManager):
    __table_name__ = "description_block"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, DescriptionBlock)

        descriptionBlock = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', Text)
                      )


        self.mapper = mapper(DescriptionBlock, descriptionBlock)

    def get_description(self, id_description):
         s = select([DescriptionBlock.description],
                   DescriptionBlock.id==id_description)

         out = self.db_session.session.execute(s).fetchone()

         if out:
             out = out[0]

         return out


#Classe responsavel por Gerenciar(consultas em geral) a tabela DescriptionBlockBorrow.
class DescriptionBlockBorrowManager(BaseManager):
    __table_name__ = "description_block_borrow"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, DescriptionBlockBorrow)

        descriptionBlockBorrow = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', Text)
                      )


        self.mapper = mapper(DescriptionBlockBorrow, descriptionBlockBorrow)

    def get_description(self, id_description):
        s = select([DescriptionBlockBorrow.description],
                    DescriptionBlockBorrow.id==id_description)

        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out


#Classe responsavel por Gerenciar(consultas em geral) a tabela Block.
class BlockManager(BaseManager):
    __table_name__ = "block"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Block)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('id_description_block', Integer, ForeignKey('description_block.id')),
                      Column('long_description', Text),
                      Column('date_block', DateTime),
                      Column('date_unblock', DateTime),
                      Column('user', Integer)
                      )

        self.mapper = mapper(Block, self.table,
                             properties={'description_block':relation(DescriptionBlock)})

    #trazer id por data de bloqueio.
    def get_date_block(self, date_block):
        s = select([Block.id],
                    Block.date_block==date_block)

        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out


#Classe responsavel por Gerenciar(consultas em geral) a tabela BlockBorrow.
class BlockBorrowManager(BaseManager):
    __table_name__ = "block_borrow"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, BlockBorrow)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('id_description_block_borrow', Integer, ForeignKey('description_block_borrow.id')),
                      Column('long_description', Text),
                      Column('date_block', DateTime),
                      Column('date_unblock', DateTime),
		      Column('user', Integer)
                      )

        self.mapper = mapper(BlockBorrow, self.table,
                             properties={'description_block_borrow':relation(DescriptionBlockBorrow)})

        #trazer id por data de bloqueio.
    def get_date_block_borrow(self, date_block_borrow):
        s = select([BlockBorrow.id],
                    BlockBorrow.date_block==date_block_borrow)

        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out


#Classe responsavel por Gerenciar(consultas em geral) a tabela Machine.
class MachineManager(BaseManager):

    __table_name__ = "machine"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Machine)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('name', String(25), nullable=False, unique=True),
                      Column('hash_id', String(100), nullable=False),
                      Column('description', Text),
                      Column('ip', String(16)),
                      Column('mac', String(20)),
                      Column('hostname', String(12)),
                      Column('last_user_id', Integer), #ForeignKey('user.id')),
                      Column('category_id', Integer), #ForeignKey('machine_category.id')),
                      Column('alienat_id', Integer) #, ForeignKey('alienat_machine.id'))
                      )

        self.mapper = mapper(Machine, self.table)
                      #properties={'machine_category':relation(MachineCategory),
                      #            'alienat_machine':relation(AlienationMachine)
                      #           })


    def delete_by_id(self, id):
        s = delete(self.table, Machine.id==id)
        self.db_session.session.execute(s)
        self.commit()
        self.emit("delete", id)

    def get_name(self, id):
        s = select([Machine.name], Machine.id==id)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out

    def get_name_mac(self, mac):
        s = select([Machine.name], Machine.mac==mac)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out

    def get_machines_id_by_category_id(self, category_id):
        s = select([Machine.id], and_(Machine.category_id==category_id, Machine.alienat_id==None))
        return self.db_session.session.execute(s).fetchall()

    def get_last_user_id(self, id):
        s = select([Machine.last_user_id], Machine.id==id)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out

    def get_last_user_id_hash(self, hash_id):
        s = select([Machine.last_user_id], Machine.hash_id==hash_id)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out

    def get_machine(self, mac):

        s = select([Machine.id, Machine.name, Machine.description, Machine.category_id], Machine.mac==mac)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out

        return out

    def get_machines_quant(self):

        return self.db_session.session.query(Machine).group_by(Machine.id).count()


#Classe responsavel por Gerenciar(consultas em geral) a tabela Machine.
class HeritageManager(BaseManager):

    __table_name__ = "heritage"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Heritage)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('name', String(255), nullable=False),
                      Column('number_ben', String(40), nullable=False),
                      Column('description', Text),
                      Column('borrow_id', Integer, ForeignKey('schedule_of_borrow.id')),
                      Column('value', String(45)),
                      Column('model', String(45)),
                      Column('brand', String(20)),
                      Column('reserve_id', Integer),
                      Column('alienat_id', Integer),
		      Column('machine_id', Integer)
                      )

        self.mapper = mapper(Heritage, self.table,
                      properties={'schedule_of_borrow':relation(ScheduleOfBorrow)
                                 })

    def delete_by_id(self, id):
        s = delete(self.table, Heritage.id==id)
        self.db_session.session.execute(s)
        self.commit()
        self.emit("delete", id)

    def get_name(self, id):
        s = select([Heritage.name], Heritage.id==id)
        out = self.db_session.session.execute(s).fetchone()
        if out:
            out = out[0]
        return out

    #traz a lista de maquinas(bens) nￃﾣo emprestados e nￃﾣo reservados. Parte cliente.
    def get_machines_no_borrow_no_reserve(self):
        s = select([Heritage.id, Heritage.model, Heritage.description],
                   and_(Heritage.id_borrow==None, Heritage.id_reserve==None))
        return self.db_session.session.execute(s).fetchall()

#Classe responsavel por Gerenciar(consultas em geral) a tabela Address.
class AddressManager(BaseManager):

    __table_name__ = "address"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Address)

        self.address = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('address', String(255), nullable=True),
                      Column('bairro', String(100), nullable=True),
                      Column('cep', String(10), nullable=True),
                      Column('city', Integer),
                      Column('state', Integer), #ForeignKey('state.id')),
                      Column('pais', Integer), #ForeignKey('pais.id'))
		      Column('user', Integer) #, ForeignKey('user.id'))
                      )

        self.mapper = mapper(Address, self.address,
                #      properties={'user':relation(User)
		#		  'pais':relation(Pais)
               #                  },
				allow_column_override=True)

    def delete_by_id(self, id):
        s = delete(self.address, Address.user==id)
        self.db_session.session.execute(s)
        self.commit()
        self.emit("delete", id)

    def get_name(self, id):
        s = select([Address.address], Address.id==id)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out

    #traz a lista de maquinas(bens) nao emprestados e nao reservados. Parte cliente.
    def get_machines_no_borrow_no_reserve(self):
        s = select([Heritage.id, Heritage.model, Heritage.description],
                   and_(Heritage.id_borrow==None, Heritage.id_reserve==None))
        return self.db_session.session.execute(s).fetchall()


#Classe responsavel por Gerenciar(consultas em geral) a tabela User.
class UserManager(BaseManager):

    __table_name__ = "user"

    def __init__(self, db_session):
        BaseManager.__init__(self, db_session, User)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('nick', String(20), nullable=False, unique=True),
                      Column('full_name', String(50), nullable=False),
                      Column('email', String(50)),
                      Column('responsible', String(50)),
                      Column('cpf', String(20)),
		      Column('birth', String(10)), #CHANGE TO DATE FORMAT
                      Column('marital_status', Integer),
                      Column('phone', String(50)),
                      Column('notes', Text),
                      Column('schooling', Integer),
                      Column('curriculo', Text),
                      Column('last_login', DateTime),
                      Column('last_machine_id', Integer), #ForeignKey('machines.id')),
                      Column('active', Boolean, default=True),
                      Column('reg_date', DateTime),
                      Column('login_count', Integer, default=0),
                      Column('sex', Integer),
                      Column('occupation', Integer),
		      Column('situation_occupation', Integer),
		      Column('type_deficiency', Integer),
		      Column('renda_familiar', Integer),
                      Column('etnia', Integer),
		      Column('credit', Float, default=0),
                      Column('password', String(32), nullable=False),
                      Column('category_id', Integer), #ForeignKey('user_category.id')),
                      Column('alterado', Boolean, default=False),
                      Column('logado', Boolean, default=False),
		      Column('autorizoEnvio', Boolean, default=False)
                      )

        self.db_session = db_session
        self.mapper = mapper(User, self.table,
                              #properties={'user_category':relation(UserCategory)},
			      allow_column_override=True)


    def get_full_name(self, user_id):

        s = select([User.full_name], User.id==user_id)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            full_name, = out
            return full_name

    def get_full_name_email_phone(self, user_id):

        s = select([User.full_name, User.email, User.phone], User.id==user_id)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            full_name, email, phone= out
            return full_name, email, phone

    def get_nick(self, user_id):

        s = select([User.nick], User.id==user_id)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            nick, = out
            return nick


    def get_user_blocked(self, blocked_id):

        s = select([User.nick, User.email, User.id], User.blocked_id==blocked_id)
        #out = self.db_session.session.execute(s).fetchone()

        #if out:
        #    out = out
        return self.db_session.session.execute(s).fetchone()

    def get_user_blocked_borrow(self, blocked_id):

        s = select([User.nick, User.email], User.blocked_borrow_id==blocked_id)
        #out = self.db_session.session.execute(s).fetchone()

        #if out:
        #    out = out
        return self.db_session.session.execute(s).fetchone()



    def get_full_name_and_nick(self):
        s = select([User.full_name, User.nick], User.blocked_id==None)
        return self.db_session.session.execute(s)

    def get_credit(self, condition, value):
        s = select([User.credit], condition==value)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out

    def get_credit_and_id(self, user_nick):
        s = select([User.credit, User.id], and_(User.nick==user_nick))
        return self.db_session.session.execute(s).fetchone()


    def get_credit_and_id(self, full_name):
        s = select([User.credit, User.id], and_(User.full_name==full_name))
        return self.db_session.session.execute(s).fetchone()

    def get_full_name_and_credit(self, user_id):
        s = select([User.full_name, User.credit], User.id==user_id)
        return self.db_session.session.execute(s).fetchone()

    def update_credit(self, user_id, value):
        s = update(self.table, User.id==user_id, {'credit': value})
        self.db_session.session.execute(s)
        self.commit()
        self.emit('credit_update', user_id, value)

    def change_password(self, user_id, password):
        s = update(self.table, User.id==user_id, {'password': password})
        self.db_session.session.execute(s)
        self.commit()

    def get_user_id(self, nick):
        s = select([User.id], User.nick==nick)
        out = self.db_session.session.execute(s).fetchone()

        if out:
            out = out[0]

        return out

    def check_user(self, user_nick, password):
        s = select([User.id, User.credit],
                    and_(User.nick==user_nick,
                         User.password==password,
                         User.active==True))
        return self.db_session.session.execute(s).fetchone()

    def check_user_logado(self, user_nick):
        s = select([User.id, User.credit],
                    and_(User.nick==user_nick,
                         User.active==True,
			 User.logado==True))
        return self.db_session.session.execute(s).fetchone()

#Classe responsavel por Gerenciar(consultas em geral) a tabela CashFlow.
class CashFlowManager(BaseFlow):

    __table_name__ = "cash_flow"

    def __init__(self, db_session):
        BaseFlow.__init__(self, db_session, CashFlowItem)

        self.table = Table(self.__table_name__,
                           self.db_session.metadata,
                           Column('id', Integer, primary_key=True),
                           Column('type', Integer, nullable=False),
                           Column('user_id', Integer), #ForeignKey('user.id')),
                           Column('value', Float, nullable=False), #TODO: Change to real Type
                           Column('day', Integer, nullable=False),
                           Column('month', Integer, nullable=False),
                           Column('year', Integer, nullable=False),
                           Column('hour', String(8), nullable=False),
                           Column('notes', Text)
                          )

        self.mapper = mapper(CashFlowItem, self.table)

    def get_debts_by_date(self, year_ini, month_ini, day_ini, year_fim, month_fim, day_fim):
        s = select([CashFlowItem.year, CashFlowItem.month, CashFlowItem.day, CashFlowItem.value, CashFlowItem.type])

        valores = []
        data_inicio = date(year_ini,  month_ini, day_ini)
        data_fim = date(year_fim, month_fim, day_fim)
        for row in self.db_session.session.execute(s):
            data_row = date(row['year'], row['month'], row['day'])
            if data_row >= data_inicio and data_row <= data_fim:
                valores.append([row['value'], row['type']])

        return valores

    def get_debts_by_utilizacao(self, year_ini, month_ini, day_ini, year_fim, month_fim, day_fim):
        s = select([CashFlowItem.year, CashFlowItem.month, CashFlowItem.day, CashFlowItem.value],
                    and_(CashFlowItem.type==8))

        valores = []
        data_inicio = date(year_ini,  month_ini, day_ini)
        data_fim = date(year_fim, month_fim, day_fim)
        for row in self.db_session.session.execute(s):
            data_row = date(row['year'], row['month'], row['day'])
            if data_row >= data_inicio and data_row <= data_fim:
                valores.append([row['value']])

        return valores

#Classe responsￃﾡvel por Gerenciar(consultas em geral) a tabela OpenDebtsMachine.
class OpenDebtsMachineManager(BaseFlow):

    __table_name__ = "opendebts_machine"

    def __init__(self, db_session):
        BaseFlow.__init__(self, db_session, OpenDebtMachineItem)

        self.table = Table(self.__table_name__,
                           self.db_session.metadata,
                           Column('id', Integer, primary_key=True),
                           Column('day', Integer, nullable=False),
                           Column('month', Integer, nullable=False),
                           Column('year', Integer, nullable=False),
                           Column('machine_id', Integer), #ForeignKey('machine.id')),
                           Column('start_time', String(8), nullable=False),
                           Column('end_time', String(8), nullable=False),
                           Column('user_id', Integer), #ForeignKey('user.id')),
                           Column('value', Float, nullable=False), #TODO: Change to real Type
                           Column('notes', Text)
                          )

        self.mapper = mapper(OpenDebtMachineItem, self.table)

    def get_debts_by_date(self, year_ini, month_ini, day_ini, year_fim, month_fim, day_fim):
        s = select([OpenDebtMachineItem.id, OpenDebtMachineItem.day, OpenDebtMachineItem.month, OpenDebtMachineItem.year, OpenDebtMachineItem.start_time, OpenDebtMachineItem.end_time, OpenDebtMachineItem.value])

        valores = []
        data_inicio = date(year_ini,  month_ini, day_ini)
        data_fim = date(year_fim, month_fim, day_fim)
        for row in self.db_session.session.execute(s):
            data_row = date(row['year'], row['month'], row['day'])
            if data_row >= data_inicio and data_row <= data_fim:
                valores.append([row['value']])
        return valores

    def get_debts_by_user(self, user_id):
        s = select([OpenDebtMachineItem.id, OpenDebtMachineItem.day, OpenDebtMachineItem.month, OpenDebtMachineItem.year, OpenDebtMachineItem.start_time, OpenDebtMachineItem.end_time, OpenDebtMachineItem.value],
              and_(OpenDebtMachineItem.user_id==user_id))

        valores = []
        for value in self.db_session.session.execute(s):
            valores.append(value)

        return valores

    def get_debts_by_user_date(self, user_id, from_date, to_date):
        s = select([OpenDebtMachineItem.id, OpenDebtMachineItem.day, OpenDebtMachineItem.month, OpenDebtMachineItem.year, OpenDebtMachineItem.start_time, OpenDebtMachineItem.end_time, OpenDebtMachineItem.value],
              and_(OpenDebtMachineItem.user_id==user_id))

        valores = []
        data_inicio = date(from_date[0], from_date[1], from_date[2])
        data_fim = date(to_date[0], to_date[1], to_date[2])
        for row in self.db_session.session.execute(s):
            data_row = date(row['year'], row['month'], row['day'])
            if data_row >= data_inicio and data_row <= data_fim:
                valores.append([int(row['year']), int(row['month']), int(row['day']), row['start_time'], row['end_time'], row['value'], row['id']])
        return valores

#Classe responsￃﾡvel por Gerenciar(consultas em geral) a tabela OpenDebtsOtherMachine.
class OpenDebtsOtherManager(BaseFlow):

    __table_name__ = "opendebts_other"

    def __init__(self, db_session):
        BaseFlow.__init__(self, db_session, OpenDebtOtherItem)

        self.table = Table(self.__table_name__,
                           self.db_session.metadata,
                           Column('id', Integer, primary_key=True),
                           Column('day', Integer, nullable=False),
                           Column('month', Integer, nullable=False),
                           Column('year', Integer, nullable=False),
                           Column('time', String(8), nullable=False),
                           Column('start_time', String(8), nullable=False),
                           Column('end_time', String(8), nullable=False),
                           Column('user_id', Integer), #ForeignKey('user.id')),
                           Column('value', Float, nullable=False), #TODO: Change to real Type
                           Column('notes', Text),
                           Column('id_description', Integer, ForeignKey('description_opendebts_other.id'))
                          )

        self.mapper = mapper(OpenDebtOtherItem, self.table,
                        properties={'description_opendebts_other':relation(DescriptionOpenDebtsOther)})

    def get_debts_by_date(self, year_ini, month_ini, day_ini, year_fim, month_fim, day_fim):
        s = select([OpenDebtOtherItem.id, OpenDebtOtherItem.day, OpenDebtOtherItem.month, OpenDebtOtherItem.year, OpenDebtOtherItem.start_time, OpenDebtOtherItem.end_time, OpenDebtOtherItem.value])

        valores = []
        data_inicio = date(year_ini,  month_ini, day_ini)
        data_fim = date(year_fim, month_fim, day_fim)
        for row in self.db_session.session.execute(s):
            data_row = date(row['year'], row['month'], row['day'])
            if data_row >= data_inicio and data_row <= data_fim:
                valores.append([row['year'], row['month'], row['day'], row['value']])

	return valores

    def get_debts_by_user(self, user_id):
        s = select([OpenDebtOtherItem.id, OpenDebtOtherItem.day, OpenDebtOtherItem.month, OpenDebtOtherItem.year, OpenDebtOtherItem.start_time, OpenDebtOtherItem.end_time, OpenDebtOtherItem.value],
              and_(OpenDebtOtherItem.user_id==user_id))

        valores = []
        for value in self.db_session.session.execute(s):
            valores.append(value)

        return valores

    def get_debts_by_user_date(self, user_id, from_date, to_date):
        s = select([OpenDebtOtherItem.id, OpenDebtOtherItem.day, OpenDebtOtherItem.month, OpenDebtOtherItem.year, OpenDebtOtherItem.start_time, OpenDebtOtherItem.end_time, OpenDebtOtherItem.value],
              and_(OpenDebtOtherItem.user_id==user_id))

        valores = []
        data_inicio = date(from_date[0], from_date[1], from_date[2])
        data_fim = date(to_date[0], to_date[1], to_date[2])
        for row in self.db_session.session.execute(s):
            data_row = date(row['year'], row['month'], row['day'])
            if data_row >= data_inicio and data_row <= data_fim:
                valores.append([row['year'], row['month'], row['day'], row['start_time'], row['end_time'], row['value'], row['id']])

	return valores
#Classe responsavel por Gerenciar(consultas em geral) a tabela History.
class HistoryManager(BaseFlow):
    __table_name__ = "history"

    def __init__(self, db_session):
        BaseFlow.__init__(self, db_session, HistoryItem)

        self.table = Table(self.__table_name__,
                           self.db_session.metadata,
                           Column('id', Integer, primary_key=True),
                           Column('day', Integer, nullable=False),
                           Column('month', Integer, nullable=False),
                           Column('year', Integer, nullable=False),
                           Column('machine_id', Integer), #ForeignKey('machine.id')),
                           Column('time', String(8), nullable=False),
                           Column('mac', String(20), nullable=False),
                           Column('ip', String(16), nullable=False),
                           Column('start_time', String(8), nullable=False),
                           Column('end_time', String(8), nullable=False),
                           Column('user_id', Integer), #ForeignKey('user.id')),
                           Column('deletado', Boolean, default=False), #Flegado quando dado baixa de pago
                          )

        self.mapper = mapper(HistoryItem, self.table)

    def get_days_for_machine_id(self, year, month, machine_mac):
        s = select([HistoryItem.day],
              and_(HistoryItem.year==year,
                   HistoryItem.month==month,
                   HistoryItem.mac==machine_mac))

        days = []

        for day, in self.db_session.session.execute(s):
            if not day in days:
                days.append(day)

        return days

    def get_days_for_user_id(self, year, month, user_id):
        s = select([HistoryItem.day],
              and_(HistoryItem.year==year,
                   HistoryItem.month==month,
                   HistoryItem.user_id==user_id))

        days = []

        for day, in self.db_session.session.execute(s):
            if not day in days:
                days.append(day)

        return days

    def clear_all(self):
        s = delete(self.table)
        self.db_session.session.execute(s)
        self.commit()

    def clear_by_year(self, year):
        s = delete(self.table, HistoryItem.year==year)
        self.db_session.session.execute(s)
        self.commit()

    def clear_by_year_and_month(self, year, month):
        s = delete(self.table,
                   and_(HistoryItem.year==year, HistoryItem.month==month))
        self.db_session.session.execute(s)
        self.commit()

    def query_relatorio_utilizacao_usuario(self, from_date, to_date, user_id):
        s = select([HistoryItem.day, HistoryItem.month, HistoryItem.year, HistoryItem.start_time, HistoryItem.end_time, HistoryItem.time, HistoryItem.machine_id], and_(HistoryItem.user_id == user_id, HistoryItem.deletado == True))
        linhas_relatorio = []
        data_inicio = date(from_date[0], from_date[1], from_date[2])
        data_fim = date(to_date[0], to_date[1], to_date[2])
        for row in self.db_session.session.execute(s):
            data_row = date(row['year'], row['month'], row['day'])
            if data_row >= data_inicio and data_row <= data_fim:
                linhas_relatorio.append([row['day'], row['month'], row['year'], row['start_time'], row['end_time'], row['time'], row['machine_id']])
        return linhas_relatorio

    def query_relatorio_utilizacao_machine(self, machine_mac, from_date, to_date):
        s = text("""SELECT day, year, month, SUM(end_time::TIME) - sum(start_time::TIME) as TEMPO, COUNT(TIME) AS ACESSOS, MACHINE_ID FROM HISTORY WHERE MACHINE_ID = :id GROUP BY day, year, month, machine_id""")
        linhas_relatorio = []
        data_inicio = date(from_date[0], from_date[1], from_date[2])
        data_fim = date(to_date[0], to_date[1], to_date[2])
        for row in self.db_session.session.execute(s, params=dict(id=machine_mac)):
            data_row = date(row['year'], row['month'], row['day'])
            if data_row >= data_inicio and data_row <= data_fim:
                linhas_relatorio.append([row['day'], row['month'], row['year'], row['tempo'], row['acessos'], row['machine_id']])
        return linhas_relatorio

#Classe responsavel por Gerenciar(consultas em geral) a tabela Cash.
class CashManager(BaseManager):
    __table_name__ = "cash"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Cash)

        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('date_time_open', DateTime, primary_key=True),
                      Column('user_id', Integer),
                      Column('date_time_close', DateTime),
                      Column('balance', Float)
                      )

        self.mapper = mapper(AlienationMachine, self.table)


#Classe responsavel por Gerenciar(consultas em geral) a tabela Perfil.
class PerfilManager(BaseManager):
    __table_name__ = "perfil"

    def __init__(self, db_session):
        BaseManager.__init__(self, db_session, Perfil)
        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
		      Column('id', Integer, primary_key=True),
                      Column('perfil_description', String(40))
                      )
        self.mapper = mapper(Perfil, self.table)

    def update_perfil_desc(self, perfil_id, desc):
        s = update(self.table, Perfil.id==perfil_id, {'perfil_description': desc})
        self.db_session.session.execute(s)
        self.commit()

    def delete_by_id(self, id):
        s = delete(self.table, Perfil.id == id)
        self.db_session.session.execute(s)
        self.commit()


#Classe responsavel por Gerenciar(consultas em geral) a tabela Perfil_User.
class PerfilUserManager(BaseManager):
    __table_name__ = "perfil_user"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Perfil_User)
        self.table = Table(self.__table_name__,
            self.db_session.metadata,
            Column('id', Integer, primary_key=True),
            Column('user_id', Integer, ForeignKey('user.id')),
            Column('perfil_id', Integer, ForeignKey('perfil.id')),
        )
        self.mapper = mapper(Perfil_User, self.table,
            properties={'user': relation(User), 'perfil': relation(Perfil)})
        self.db_session = db_session

    def get_perfilId_by_userId(self, userId):
        query = select([Perfil_User.perfil_id], and_(
            Perfil_User.user_id == userId))
        perfil_id = self.db_session.session.execute(query).fetchone()

        if perfil_id:
            return perfil_id[0]

    def get_PerfilUser_by_userId(self, userId):
        query = select([Perfil_User.id, Perfil_User.user_id,
            Perfil_User.perfil_id], and_(Perfil_User.user_id == userId))
        result = self.db_session.session.execute(query).fetchone()
        if result:
            perfilUser = Perfil_User(result[1], result[2])
            perfilUser.id = result[0]
            return perfilUser
        return None

    def delete_by_id(self, id):
        s = delete(self.table, Perfil_User.id == id)
        self.db_session.session.execute(s)
        self.commit()
        self.emit("delete", id)

    def delete_by_user_id(self, user_id):
        s = delete(self.table, Perfil_User.user_id == user_id)
        self.db_session.session.execute(s)
        self.commit()

    def delete_by_perfil_id(self, perfil_id):
        s = delete(self.table, Perfil_User.perfil_id == perfil_id)
        self.db_session.session.execute(s)
        self.commit()


#Classe responsavel por Gerenciar(consultas em geral) a tabela ActionCategory.
class ActionCategoryManager(BaseManager):
    __table_name__ = "action_category"

    def __init__(self, db_session):
        BaseManager.__init__(self, db_session, ActionCategory)
        self.table = Table(self.__table_name__,
                      self.db_session.metadata,
                      Column('id', Integer, primary_key=True),
                      Column('description', String(40))
                      )
        self.mapper = mapper(ActionCategory, self.table)


#Classe responsavel por Gerenciar(consultas em geral) a tabela Action.
class ActionManager(BaseManager):
    __table_name__ = "action"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, Action)
        self.table = Table(self.__table_name__,
            self.db_session.metadata,
            Column('id', Integer, primary_key=True),
            Column('description', String(40)),
            Column('action_category_id', Integer, ForeignKey(
                                                        'action_category.id'))
        )
        self.mapper = mapper(Action, self.table,
            properties={'action_category': relation(ActionCategory)})
        self.db_session = db_session


#Classe responsavel por Gerenciar(consultas em geral) a tabela Perfil_User.
class PerfilActionManager(BaseManager):
    __table_name__ = "perfil_action"

    def __init__(self, db_session):

        BaseManager.__init__(self, db_session, PerfilAction)
        self.table = Table(self.__table_name__,
            self.db_session.metadata,
            Column('id', Integer, primary_key=True),
            Column('action_id', Integer, ForeignKey('action.id')),
            Column('perfil_id', Integer, ForeignKey('perfil.id')),
        )
        self.mapper = mapper(PerfilAction, self.table,
            properties={'action': relation(Action),
                                                   'perfil': relation(Perfil)})
        self.db_session = db_session

    def get_perfil_actions_by_perfil_id(self, perfil_id):
        query = select([PerfilAction.id, PerfilAction.action_id,
            PerfilAction.perfil_id], and_(PerfilAction.perfil_id == perfil_id))
        result = self.db_session.session.execute(query)

        perfil_actions = []

        if result:
            for row in result:
                perfilAction = PerfilAction(row['action_id'], row['perfil_id'])
                perfilAction.id = row['id']
                perfil_actions.append(perfilAction)

        return perfil_actions

    def delete_by_perfil_id(self, perfil_id):
        s = delete(self.table, PerfilAction.perfil_id == perfil_id)
        self.db_session.session.execute(s)
        self.commit()
