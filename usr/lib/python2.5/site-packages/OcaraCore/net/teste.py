def on_authorization_machine(self, status, hash_id, session):
        
        dados = {}
        time = None
        dados = {
     	        "name" : "estacao",
                "description" : "estacao do telecentro",
                "category_id" : None,
                "ip" : "0.0.0.0.0",
                "mac" : "0:0:0:0",
                "hostname" : "comp00.ltsp",
                "last_user_id" : None,
                "hash_id" : None,		
                "id" : 0             
        	}

	#Traz o IP = session.client_address[0]
	
	print session.client_address[0]
	

        lista_ips_usr = sh.netstat("-t -e |grep x11| sed -e 's/:/ /g'| awk '{print $6,$9}'| grep -v root | grep -v tux | sort | uniq")

        retorno = string.strip(lista_ips_usr[0])

        print retorno[0:12]
        print retorno[13:]

	if lista_ips_usr.count != 0:
         for dados in lista_ips_usr:
            var = ""
            var3 = ""		
            var4 = ""
            var2 = ""
            var5 = ""
	
            var = string.strip(host[0:12])
            var3 = string.strip(host[13:])

	    cmd2 = os.popen("getent hosts | grep -w "+var+" | awk '{print $1}'")
            lista_ip = cmd2.readlines()
            for ip in lista_ip:
                var4 = string.strip(ip)
    

            cmd3 = os.popen("/usr/sbin/arp "+var+" | grep -v HWaddress | awk '{print $3}'")
            lista_mac = cmd3.readlines()
            for mac in lista_mac:
                var5 = string.strip(mac)


	    if (var3 != "gdm" and var3 != "root" and var3 != "squid" and var3 != "xdm" and var3 != "kdm"):

       else:
	    cmd3 = os.popen("/usr/sbin/arp "+session.client_address[0]+" | grep -v HWaddress | awk '{print $1,$3}'")
            lista_dados = cmd3.readlines()
            for dados in lista_dados:
		host = string.strip(dados[0:12])
                mac = string.strip(dados[13:])

	    
	    cmd4 = os.popen("rusers -l "+session.client_address[0]+" | awk '{print $1}' | uniq")
            lista_dados = cmd4.readlines()
            for dados in lista_dados:

		usr = string.strip(dados)


	    
	    







            
		
                print "maquina " + hash_id
                print "mac " + var5
                print "usr " + var3
                cmd = os.popen("ps --User "+var3+" | grep ocara-client | awk '{print $4}'")
                lista_proc = cmd.readlines()
		
                for proces in lista_proc:
                    var2 = string.strip(proces)

                maquina = self.machine_manager.get_all().filter_by(mac=var5).all()

                user_l = self.users_manager.get_all().filter_by(nick=var3).one()

                if (var2 == "ocara-client" and not user_l.logado):
                   
                    dados['ip'] = var4
                    dados['mac'] = var5
                    dados['name'] = var
                    dados['hostname'] = var
		    
		    
                    maquina2 = self.machine_manager.get_all().filter_by(hash_id=hash_id).all()
                    
                    if (not maquina and not maquina2):	
                    
                            self.instmachine_manager.allow_machine(hash_id, dados, session)
            
                    else:
                        maquina = maquina[0]
                    
                        hash_id2 = hash_id

                        if (maquina2):

                            maquina2 = maquina2[0]
                    
                            if (maquina2.mac != maquina.mac):

                               
                                import time
                                from hashlib import sha1 as sha
                    
                                cur_time = time.time()
                                hash = sha(str(cur_time))
                                
                                hash_id2 = hash.hexdigest()
			
                        assert self.instmachine_manager.machines_by_id[maquina.id]	
                        machine_inst = self.instmachine_manager.machines_by_id[maquina.id]
			
		           		
                        if (status == 1):
			   			   
                            self.on_delete_machine(maquina, machine_inst.hash_id)
                          
                            self.instmachine_manager.allow_machine_update(hash_id2, maquina, session)
                           
                        
                    maquina = self.machine_manager.get_all().filter_by(mac=var5).all()
                    maquina = maquina[0]
                    assert self.instmachine_manager.machines_by_id[maquina.id]	
                    self.machine_inst = self.instmachine_manager.machines_by_id[maquina.id]
	            
                    user_id = self.users_manager.get_user_id(var3)
                    price_per_hour = self.instmachine_manager.get_price_per_hour(self.machine_inst)
		    print price_per_hour
                    currency = self.conf_client.get_string('currency')
                    if (self.machine_inst.status != 2 and self.machine_inst.status != 0):
                       limited = False
		
                       if (user_id):

                          full_name, credit = self.users_manager.get_full_name_and_credit(user_id)
                          if (credit == 0):

                              dlg = dialogs.unblock_date(currency=currency, 
                                                         nick=var3,
                                                         maquina=maquina.name,
                                                         Parent=self.mainwindow)
                              time = dlg.run()
			      if(not time):
				 os.system("pkill -9 -U " + var3)
                          else:
                              time = calculate_time(price_per_hour, credit)
			      self.machine_inst.time = time
	
			  print credit
			  print self.machine_inst.time
                          self.instmachine_manager.unblock(self.machine_inst,
                                                           True,
                                                           True,
                                                           user_id,
                                                           time,
                                                           price_per_hour,
                                                           False)	

                       
                       else:
                           dialogs.ok_only(_("<b><big>Usuário não cadastrado</big></b>\n\n"
                                             "Você deverá cadastrar o usuário antes de permitir o acesso."),
                                              Parent=self.mainwindow,
                                              ICON=gtk.MESSAGE_ERROR)
   		           os.system("pkill -9 -U " + var3)

                           return                               

				
   			    
        #self.update_new_machines_state()
